call plug#begin('~/workspace/.local/share/nvim/plugged')

Plug 'junegunn/vim-easy-align'
Plug 'aceofall/gtags.vim'
Plug 'kien/ctrlp.vim'
Plug 'plasticboy/vim-markdown', {'for': 'markdown'}
Plug 'tbastos/vim-lua', {'for': 'lua'}
Plug 'scrooloose/nerdcommenter'
Plug 'morhetz/gruvbox'
Plug 'neovimhaskell/haskell-vim', {'for': 'haskell'}
Plug 'KabbAmine/zeavim.vim'
Plug 'donRaphaco/neotex', { 'for': 'tex' }
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'vim-erlang/vim-erlang-omnicomplete'
Plug 'iamcco/markdown-preview.nvim', { 'do': 'cd app & yarn install'  }
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'JuliaEditorSupport/julia-vim'

call plug#end()

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

let g:neotex_pdflatex_alternative = 'xelatex'
let g:latex_to_unicode_auto = 1

set t_Co=256

let g:rustfmt_autosave = 1

set hidden

"打开光标所在行列位置的显示
set ruler

"状态栏显示设置
set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]
set laststatus=2

"显示相对行号
"set relativenumber
"set number

"tags路径
set tags+=/usr/include/tags
set tags+=tags;
"set autochdir

"语法高亮
syntax on

"高亮显示搜索结果
set hls
set incsearch

set updatetime=200

"使能man.vim插件
":source $VIMRUNTIME/ftplugin/man.vim

"short cut settings
nmap <C-x>n :bnext<CR>
nmap <C-x>p :bprev<CR>
nmap <C-x>c :bprev\|bdelete#<CR>
nmap <C-x>l :ls<CR>
nmap <C-x>j :cn<CR>
nmap <C-x>k :cp<CR>

tnoremap <Esc> <C-\><C-n>

"map <c-h> <c-w>h
"map <c-j> <c-w>j
"map <c-k> <c-w>k
"map <c-l> <c-w>l

"快速全局缩进
nnoremap <F2> gg=G

"Golang GoImports short cut
nnoremap <F4> :call CompileAndRun()<CR>

let g:tex_flavor='latex'

func CompileAndRun()
    exec "w"
    if &filetype == 'c'
        exec "!clang % && ./a.out && rm a.out"
    elseif &filetype == 'cpp'
        exec "!clang++ % && ./a.out && rm a.out"
    elseif &filetype == 'go'
        exec "!go run %"
    elseif &filetype == 'python'
        exec "!python3 %"
    elseif &filetype == 'sh'
        exec "!sh %"
    elseif &filetype == 'lua'
        exec "!lua %"
    endif
endfunc

"缩进与tab宽度
set smartindent
set cindent
set tabstop=4
set shiftwidth=4
set expandtab


"退格键定义
set backspace=indent,eol,start

"始终保持底部行数
set scrolloff=5

"scheme setting
colorscheme gruvbox
set background=dark
set cursorline
highlight CursorLine cterm=NONE guibg=#C0C0C0

"vim-markdown setting
let g:vim_markdown_folding_disabled = 1
set nofoldenable

autocmd BufWritePre *.go :call CocAction('runCommand', 'editor.action.organizeImport')
autocmd BufWritePre *.go,*.rs :call CocAction('format')
autocmd CursorHold *.c,*.go,*.rs silent call CocActionAsync('highlight')

"autocmd BufNewFile *.cpp,*.[ch] exec ":call SetTitle()"
func SetTitle()
    call setline(1, "/***********************************************")
    call append(line("."), "   > File Name:      ".expand("%"))
    call append(line(".")+1, "   > Author:         zhenglin.huang")
    call append(line(".")+2, "   > Created Time:   ".strftime("%F"))
    call append(line(".")+3, "   > Email:          zhenglin.huang@qdreamer.com")
    call append(line(".")+4, "***********************************************/")
    call append(line(".")+5, "")
endfunc

autocmd BufNewFile *.h exec ":call SetHeader()"
func SetHeader()
    let path = split(expand("%:h"), "/")
    call add(path, substitute(expand("%:t"), "\\.", "_", ""))
    let path = filter(path, 'v:val != "."')
    let defineVar = "__" . toupper(join(path, "_")) . "__"
    call setline(1, "#ifndef " . defineVar)
    call append(line("."), "#define " . defineVar)
    call append(line(".")+1, "")
    call append(line(".")+2, "#ifdef __cplusplus")
    call append(line(".")+3, "extern \"C\" {")
    call append(line(".")+4, "#endif")
    call append(line(".")+5, "")
    call append(line(".")+6, "#ifdef __cplusplus")
    call append(line(".")+7, "};")
    call append(line(".")+8, "#endif")
    call append(line(".")+9, "#endif")
    call setpos(".", [0, line(".")+6, 0, 0])
endfunc

autocmd BufNewFile *.py exec ":call InitPython()"
func InitPython()
    call setline(1, "#! /usr/bin/env python")
    call append(line("."), "# -*- coding:utf-8 -*-")
    call append(line(".")+1, "")
    call append(line(".")+2, "")
    normal G
endfunc

"autocmd BufNewFile *.lua exec ":call InitLua()"
func InitLua()
    call setline(1, "#! /usr/bin/env lua")
    call append(line("."), "")
    call append(line(".")+1, "")
    normal G
endfunc

autocmd BufNewFile *.sh exec ":call InitSh()"
func InitSh()
    call setline(1, "#! /usr/bin/env bash")
    call append(line("."), "")
    call append(line(".")+1, "")
    normal G
endfunc

"scons settings
autocmd BufReadPost SConstruct,Sconstruct,sconstruct,SConscript exec ":call InitScons()"
func InitScons()
    exec ":set filetype=python"
    exec ":let g:pymode_lint = 0"
endfunc


autocmd QuickFixCmdPost * vert copen 90

"gtags-vim settings
set cscopetag
set cscopeprg='gtags-cscope'
let GtagsCscope_Auto_Load = 1
let GtagsCscope_Auto_Map = 1
let GtagsCscope_Quiet = 1

"vim-easyalign settings
vmap <Enter> <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

packloadall
silent! helptags ALL

"remember last update or view postion"
" When editing a file, always jump to the last cursor position 
autocmd BufReadPost *
\ if line("'\"") > 0 && line ("'\"") <= line("$") |
\ exe "normal g'\"" |
\ endif 

set runtimepath^=~/workspace/.local/share/nvim/plugged/vim-erlang-omnicomplete
